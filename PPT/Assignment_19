1. def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists:
            return None
        while len(lists)>1:
            mergedlist=[]
            for i in range(0,len(lists),2):
                l1=lists[i]
                l2=lists[i+1] if (i+1)<len(lists) else 0
                mergedlist.append(self.mergesort(l1,l2))
            lists=mergedlist
        return lists[0]
        
                
    def mergesort(self,l1,l2):
        dummy=ListNode()
        tail=dummy
        while l1 and l2:
            if l1.val<l2.val:
                tail.next=l1
                l1=l1.next
            else:
                tail.next=l2
                l2=l2.next
            tail=tail.next
        if l1:
            tail.next=l1
        if l2:
            tail.next=l2
        return dummy.next


2. def countSmaller(self, nums: List[int]) -> List[int]:
        def merge(self, L, R):
            i = 0
            j = 0
            ans = []
            smaller = 0
        
            while i < len(L) and j < len(R):
                if L[i][1] > R[j][1]:
                    ans.append(R[j])
                    smaller += 1
                    j += 1
                else:
                    ans.append(L[i])
                    self.res[L[i][0]] += smaller
                    i += 1
        
            while i < len(L):
                ans.append(L[i])
                self.res[L[i][0]] += smaller
                i += 1
        
            while j < len(R):
                ans.append(R[j])
                j += 1
        
            return ans
    
        def mergeSort(self, nums):
            n = len(nums)
            if n == 1:
                return nums
        
            mid = n // 2
            L = self.mergeSort(nums[:mid])
            R = self.mergeSort(nums[mid:])
            return self.merge(L, R)
                
        def countSmaller(self, nums: List[int]) -> List[int]:
            n = len(nums)
            if n == 1:
                return [0]
        
            nums = [[i, nums[i]] for i in range(n)]
            self.res = [0 for _ in range(n)]
            self.mergeSort(nums)
            return self.res

3.  def sortArray(self, nums: List[int]) -> List[int]:
        if len(nums) > 1:
            mid = len(nums) // 2
            left = nums[:mid]
            right = nums[mid:]

            self.sortArray(left)
            self.sortArray(right)

            i = j = k = 0

            while i < len(left) and j < len(right):
                if left[i] < right[j]:
                    nums[k] = left[i]
                    i += 1
                else:
                    nums[k] = right[j]
                    j += 1
                k += 1
            
            while i < len(left):
                nums[k] = left[i]
                i += 1
                k += 1
            
            while j < len(right):
                nums[k] = right[j]
                j += 1
                k += 1

        return nums


4.     l=0
        for r in range(len(nums)):
            if nums[r]:
                nums[l],nums[r]=nums[r],nums[l]
                l+=1

5.  def rearrangeArray(self, nums: List[int]) -> List[int]:
        p, n = [x for x in nums if x > 0], [x for x in nums if x < 0]
        a = []
        for i in range(len(p)):
            a.append(p[i])
            a.append(n[i])
        return a    

6. # Python program to merge two sorted arrays/
def mergeArrays(arr1, arr2, n1, n2, arr3):
	i = 0
	j = 0
	k = 0

	# traverse the arr1 and insert its element in arr3
	while(i < n1):
		arr3[k] = arr1[i]
		k += 1
		i += 1

	# now traverse arr2 and insert in arr3
	while(j < n2):
		arr3[k] = arr2[j]
		k += 1
		j += 1

	# sort the whole array arr3
	arr3.sort()


# Driver code
if __name__ == '__main__':
	arr1 = [1, 3, 5, 7]
	n1 = len(arr1)

	arr2 = [2, 4, 6, 8]
	n2 = len(arr2)

	arr3 = [0 for i in range(n1+n2)]
	mergeArrays(arr1, arr2, n1, n2, arr3)

	print("Array after merging")
	for i in range(n1 + n2):
		print(arr3[i], end=" ")


7.  return set(nums1) & set(nums2)


8. def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        hashMap,result = {},[]
        for num in nums1:hashMap[num] = hashMap.get(num,0)+1
        
        for num in nums2:
            if num in hashMap and hashMap[num] != 0:
                result.append(num) 
                hashMap[num] -= 1

        return result 
