 1.  minv=0
        maxv=len(s)
        res=[]
        for v in s:
            if v=='I':
                res.append(minv)
                minv+=1
            else:
                res.append(maxv)
                maxv-=1
        if s[-1]=='I':
            res.append(minv)
        else:
            res.append(maxv)
        return res
        
  2.def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        
        for t in range(len(matrix)):
            if target in matrix[t]:
                return True
            else:
                t+=1
        return False
        
        
 3. max_num = max(arr)
        if max_num == arr[len(arr) - 1] or max_num == arr[0]:
            return False
        max_found = False
        for i in range(len(arr) - 1):
            if arr[i] == max_num:
                max_found = True
            if max_found and arr[i] <= arr[i + 1]:
                return False
            elif not max_found and arr[i] >= arr[i + 1]:
                return False
        return True

4. count=0
        subarray=0
        dict={}
        for i in range(len(nums)):
            if nums[i]==0:
                count-=1
            else:
                count+=1
            if count==0:subarray=1+i
            if count in dict:
                subarray=max(subarray,i-dict[count])
            else:
                dict[count]=i
        return subarray
        
        
        
5.def minValue(A, B, n):
 
    # Sort A and B so that minimum and maximum
    # value can easily be fetched.
    A.sort()
    B.sort()
 
    # Multiplying minimum value of A and maximum
    # value of B
    result = 0
    for i in range(n):
        result += (A[i] * B[n - i - 1])
 
    return result
 
 
# Driven Program
A = [3, 1, 1]
B = [6, 5, 4]
n = len(A)
print (minValue(A, B, n))
            
            
6.def findOriginalArray(self, changed: List[int]) -> List[int]:
        changed.sort()
        stk,res=deque([]),[]
        for i in changed:
            
            if stk and stk[0]*2==i:
                
                b=stk.popleft()
                res.append(b)
            else:
                stk.append(i)
        return res if not stk else []
        
        
7. def generateMatrix(self, n: int) -> List[List[int]]:
        matrix=[[0 for i in range(n) ]for i in range(n) ]
        left,right,top,bottom=0,n-1,0,n-1
        val=1
        while left<=right:
            for r in range(left,right+1):
                matrix[top][r]=val
                val+=1
            top+=1
            for c in range(top,bottom+1):
                matrix[c][right]=val
                val+=1
            right-=1
            for r in range(right,left-1,-1):
                matrix[bottom][r]=val
                val+=1
            bottom-=1
            for  c in range(bottom,top-1,-1):
                matrix[c][left]=val
                val+=1
            left+=1
        return matrix
