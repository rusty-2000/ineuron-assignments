1.  def maxSumBST(self, root: TreeNode) -> int:
        res = 0
        def traverse(root):
            '''return status_of_bst, size_of_bst, left_bound, right_bound'''
            nonlocal res
            if not root: return 1, 0, None, None # this subtree is empty
            
            ls, l, ll, lr = traverse(root.left)
            rs, r, rl, rr = traverse(root.right)
            
            if ((ls == 2 and lr < root.val) or ls == 1) and ((rs == 2 and rl > root.val) or rs == 1):
		        # this subtree is a BST
                size = root.val + l + r
                res = max(res, size)
                return 2, size, (ll if ll is not None else root.val), (rr if rr is not None else root.val)
            return 0, None, None, None # this subtree is not a BST
        
        traverse(root)
        return res


2.  # Python implementation to construct a BST
# from its level order traversal

# Importing essential libraries
from collections import deque

# Node of a BST


class Node:
	def __init__(self, data):
		self.data = data
		self.left = None
		self.right = None


def constructBst(arr, n):
	queue = deque()
	if n == 0:
		return None

	# Create root node and store a copy of it in head
	root = Node(arr[0])
	head = root

	# Push the root node and the initial range
	queue.append((root, (-float("inf"), float("inf"))))
	i = 1

	# Loop over the contents of arr to process all the elements using
	# while loop we may have to process atmost 2 child's
	while i < n:

		# Get the node and the range at the front of the queue
		# and popout the leftmost element
		temp = queue[0][0]
		tempRange = queue[0][1]
		queue.popleft()

		# Check if arr[i] can be left child and within range of it's parent data
		if (arr[i] < temp.data) and tempRange[0] < arr[i] < tempRange[1]:

			# Set the left child and new range for the child
			temp.left = Node(arr[i])
			queue.append((temp.left, (tempRange[0], temp.data)))
			i += 1

		# Check if arr[i] can be right child and within range of it's parent data
		if arr[i] > temp.data and tempRange[0] < arr[i] < tempRange[1]:

			# Set the right child and new range for the child
			temp.right = Node(arr[i])
			queue.append((temp.right, (temp.data, tempRange[1])))
			i += 1
	return head


def inorderTraversal(root):
	if (root == None):
		return None

	inorderTraversal(root.left)
	print(root.data, end=" ")
	inorderTraversal(root.right)


# Driver program
if __name__ == '__main__':

	arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]
	n = len(arr)

	root = constructBst(arr, n)

	print("Inorder Traversal: ")
	root = inorderTraversal(root)


3. # Python3 implementation to check if the
# given array can represent Level Order
# Traversal of Binary Search Tree
INT_MIN, INT_MAX = float('-inf'), float('inf')

# To store details of a node like node's
# data, 'min' and 'max' to obtain the
# range of values where node's left
# and right child's should lie
class NodeDetails:

	def __init__(self, data, min, max):
		self.data = data
		self.min = min
		self.max = max

# function to check if the given array
# can represent Level Order Traversal
# of Binary Search Tree
def levelOrderIsOfBST(arr, n):

	# if tree is empty
	if n == 0:
		return True
	
	# queue to store NodeDetails
	q = []
	
	# index variable to access array elements
	i = 0
	
	# node details for the root of the BST
	newNode = NodeDetails(arr[i], INT_MIN, INT_MAX)
	i += 1
	q.append(newNode)
	
	# until there are no more elements
	# in arr[] or queue is not empty
	while i != n and len(q) != 0:	
	
		# extracting NodeDetails of a
		# node from the queue
		temp = q.pop(0)
		
		# check whether there are more elements
		# in the arr[] and arr[i] can be left
		# child of 'temp.data' or not
		if i < n and (arr[i] < temp.data and
					arr[i] > temp.min):
		
			# Create NodeDetails for newNode
			#/ and add it to the queue
			newNode = NodeDetails(arr[i], temp.min, temp.data)
			i += 1
			q.append(newNode)			
		
		# check whether there are more elements
		# in the arr[] and arr[i] can be right
		# child of 'temp.data' or not
		if i < n and (arr[i] > temp.data and
					arr[i] < temp.max):
		
			# Create NodeDetails for newNode
			#/ and add it to the queue
			newNode = NodeDetails(arr[i], temp.data, temp.max)
			i += 1
			q.append(newNode)		
				
	# given array represents level
	# order traversal of BST
	if i == n:
		return True
		
	# given array do not represent
	# level order traversal of BST
	return False	

# Driver code
if __name__ == "__main__":

	arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]
	n = len(arr)	
	if levelOrderIsOfBST(arr, n):
		print("Yes")
	else:
		print("No")





