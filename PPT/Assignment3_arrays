1.   def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res=0
        minimum=999999999
        for i ,a in enumerate(nums):
            if i>0 and a==nums[i-1]:
                continue
            l,r=i+1,len(nums)-1 
            while l<r:
                if a+nums[l]+nums[r]-target<minimum and a+nums[l]+nums[r]-target>=0:
                    minimum=a+nums[l]+nums[r]
                    res=a+nums[l]+nums[r]
                    l+=1
                    while nums[l]==nums[l-1] and l<r:
                        l+=1  
                       
                elif a+nums[l]+nums[r]<0:
                    l+=1
                else:
                   
                    r-=1 
              
                     
        return res

2. def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        res=[]
        quad=[]
        def kSum(k,start,target):
            if k!=2:
                for i in range(start,len(nums)-k+1):
                    if i>start and nums[i]==nums[i-1]:
                        continue
                    quad.append(nums[i])
                    kSum(k-1,i+1,target-nums[i])
                    quad.pop()
                return
            
            l,r=start,len(nums)-1
            while l<r:
                if nums[l]+nums[r]<target:
                    l+=1
                elif nums[l]+nums[r]>target:
                    r-=1
                else:
                    res.append(quad+[nums[l],nums[r]])
                    l+=1
                    while l<r and nums[l]==nums[l-1]:
                        l+=1
        kSum(4,0,target)
        return res
        
        
  3.def nextPermutation(self, nums: List[int]) -> None:
        if len(nums)<=2:
            return nums.reverse()
        pointer=len(nums)-2
        while pointer>=0 and nums[pointer]>=nums[pointer+1]:
            pointer -=1
        if pointer==-1:
            return nums.reverse()
        for i in range(len(nums)-1,pointer,-1):
            if nums[pointer]<nums[i]:
                nums[i],nums[pointer]=nums[pointer],nums[i]
                break
        nums[pointer+1:]=reversed(nums[pointer+1:])
                
        return nums
            
            
  4.  def searchInsert(self, nums: List[int], target: int) -> int:
        l,r=0,len(nums)-1
        while l<=r:
            mid=(l+r)//2
         
            if nums[mid]==target:
                return mid
               
            elif nums[mid]<target:
                l+=1
            elif nums[mid]>target:
                r-=1
            
                
        return l


5. def plusOne(self, digits: List[int]) -> List[int]:
        res=digits[0]
        a=1
        while a<len(digits):
            res=res*10+digits[a]
            a+=1
        res+=1
        res = list(map(int, str(res)))
        return res
        
        
 6. def findSingle( ar, n):
      
    res = ar[0]
      
    # Do XOR of all elements and return
    for i in range(1,n):
        res = res ^ ar[i]
      
    return res
  
# Driver code
ar = [2, 3, 5, 4, 5, 3, 4]
print "Element occurring once is", findSingle(ar, len(ar))


7.  def summaryRanges(self, nums: List[int]) -> List[str]:
        if not nums:
            return None
        ans=[]
        j=0
        for i in range(len(nums)):
            if i+1==len(nums) or nums[i]+1!=nums[i+1]:
                if j==i:
                    
                    ans.append(str(nums[i]))

                else:
                    ans.append(str(nums[j])+"->"+str(nums[i]))
                j=i+1

        return ans                            


8. def can_attend_meetings(self, intervals: List[Interval]) -> bool:
        intervals.sort(key=lambda i:i.start)
        
        for i in range(1,len(intervals)):
            i1=intervals[i-1]
            i2=intervals[i]
            if i2.start<i1.end:
                return False
        return True
