1. def next_in_line(in_list,in_num):
    if len(in_list) > 1:
        in_list.append(in_num)
        in_list.remove(in_list[0])
        print(f'Output ➞ {in_list}')
    else:
        print('No list has been selected')

next_in_line([5, 6, 7, 8, 9], 1) 
next_in_line([7, 6, 3, 23, 17], 10)
next_in_line([1, 10, 20, 42 ], 6)
next_in_line([], 6)


2. def get_budgets(in_dict):
    sum = 0
    for ele in in_dict:
        sum += ele["budget"]
    print(f'Output ➞ {sum}')
    
get_budgets([
{ "name": "John", "age": 21, "budget": 23000 },
{ "name": "Steve", "age": 32, "budget": 40000 },
{ "name": "Martin", "age": 16, "budget": 2700 }
])

get_budgets([
{ "name": "John", "age": 21, "budget": 29000 },
{ "name": "Steve", "age": 32, "budget": 32000 },
{ "name": "Martin", "age": 16, "budget": 1600 }
])


3.def alphabet_soup(in_string):
    out_string = ''.join(sorted(in_string))
    print(f'{in_string} ➞ {out_string}')

alphabet_soup("hello")
alphabet_soup("edabit")
alphabet_soup("hacker")
alphabet_soup("geek")
alphabet_soup("javascript")


compound_interest(100, 1, 0.05, 1) ➞ 105.0
compound_interest(3500, 15, 0.1, 4) ➞ 15399.26
compound_interest(100000, 20, 0.15, 365) ➞ 2007316.264.

def compound_interest(principal,years,roi,cp):
    ci = principal*(1+(roi/cp))**(cp*years)
    print(f'Output ➞ {ci:.2f}')

compound_interest(100, 1, 0.05, 1)
compound_interest(3500, 15, 0.1, 4)
compound_interest(100000, 20, 0.15, 365)


5.def return_only_integer(in_list):
    out_list = []
    for ele in in_list:
        if type(ele) == int:
            out_list.append(ele)
    print(f'{in_list} ➞ {out_list}')
    
return_only_integer([9, 2, "space", "car", "lion", 16])
return_only_integer(["hello", 81, "basketball", 123, "fox"])
return_only_integer([10, "121", 56, 20, "car", 3, "lion"]) 
return_only_integer(["String", True, 3.3, 1])